{"ast":null,"code":"var _jsxFileName = \"/Users/fawazahammed/Desktop/netflix-react-clone-master/src/Components/RowPost/RowPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './RowPost.css';\nimport axios from \"../axios\";\nimport { imageUrl, API_KEY } from '../../Constants/constants';\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RowPost(props) {\n  _s();\n\n  const [movie, setMovie] = useState([]);\n  const [urlId, setUrlId] = useState('');\n  useEffect(() => {\n    axios.get(props.url).then(response => {\n      setMovie(response.data.results);\n    });\n  }, []);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleMovie = id => {\n    console.log(id);\n    axios.get(`/movie/${id}/videos?api_key=${API_KEY}&language=en-US`).then(response => {\n      if (response.data.results.length !== 0) {\n        setUrlId(response.data.results[0]);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posters\",\n      children: movie.map((data, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => {\n          handleMovie(data.id);\n        },\n        className: props.isSmall ? 'smallPoster' : 'poster',\n        src: `${imageUrl + data.backdrop_path}`,\n        alt: \"\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), urlId && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: urlId.key,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RowPost, \"ZQ18RaBQImNPS/hrck0jqKQLHVg=\");\n\n_c = RowPost;\nexport default RowPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"RowPost\");","map":{"version":3,"sources":["/Users/fawazahammed/Desktop/netflix-react-clone-master/src/Components/RowPost/RowPost.js"],"names":["React","useEffect","useState","axios","imageUrl","API_KEY","YouTube","RowPost","props","movie","setMovie","urlId","setUrlId","get","url","then","response","data","results","opts","height","width","playerVars","autoplay","handleMovie","id","console","log","length","title","map","index","isSmall","backdrop_path","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAO,eAAP;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAiC,2BAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAI;AACVE,IAAAA,KAAK,CAACU,GAAN,CAAUL,KAAK,CAACM,GAAhB,EAAqBC,IAArB,CAA2BC,QAAD,IAAY;AAClCN,MAAAA,QAAQ,CAACM,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAR;AACH,KAFD;AAGH,GAJQ,EAIP,EAJO,CAAT;AAKA,QAAMC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHH,GAAb;;AAQE,QAAMC,WAAW,GAAEC,EAAD,IAAM;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACAtB,IAAAA,KAAK,CAACU,GAAN,CAAW,UAASY,EAAG,mBAAkBpB,OAAQ,iBAAjD,EAAmEU,IAAnE,CAAyEC,QAAD,IAAY;AAChF,UAAGA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBU,MAAtB,KAA+B,CAAlC,EACA;AACIhB,QAAAA,QAAQ,CAACI,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,CAAtB,CAAD,CAAR;AACH;AACJ,KALD;AAML,GARD;;AASF,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKV,KAAK,CAACqB;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAEMpB,KAAK,CAACqB,GAAN,CAAU,CAACb,IAAD,EAAMc,KAAN,kBACR;AAAK,QAAA,OAAO,EAAE,MAAI;AAACP,UAAAA,WAAW,CAACP,IAAI,CAACQ,EAAN,CAAX;AAAqB,SAAxC;AAAsD,QAAA,SAAS,EAAEjB,KAAK,CAACwB,OAAN,GAAgB,aAAhB,GAAgC,QAAjG;AAA2G,QAAA,GAAG,EAAG,GAAE5B,QAAQ,GAACa,IAAI,CAACgB,aAAc,EAA/I;AAAkJ,QAAA,GAAG,EAAC;AAAtJ,SAA+CF,KAA/C;AAAA;AAAA;AAAA;AAAA,cADF;AAFN;AAAA;AAAA;AAAA;AAAA,YAFJ,EAWKpB,KAAK,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,KAAK,CAACuB,GAAxB;AAA6B,MAAA,IAAI,EAAEf;AAAnC;AAAA;AAAA;AAAA;AAAA,YAXd;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAzCQZ,O;;KAAAA,O;AA2CT,eAAeA,OAAf","sourcesContent":["import React ,{useEffect,useState} from \"react\";\nimport './RowPost.css'\nimport axios from \"../axios\";\nimport { imageUrl, API_KEY} from '../../Constants/constants'\nimport YouTube from \"react-youtube\";\n\nfunction RowPost(props){\n    const [movie, setMovie] = useState([])\n    const [urlId, setUrlId] = useState('')\n    useEffect(()=>{\n        axios.get(props.url).then((response)=>{\n            setMovie(response.data.results)\n        })\n    },[])\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          autoplay: 1,\n        },\n      }\n      const handleMovie=(id)=>{\n            console.log(id);\n            axios.get(`/movie/${id}/videos?api_key=${API_KEY}&language=en-US`).then((response)=>{\n                if(response.data.results.length!==0)\n                {\n                    setUrlId(response.data.results[0])\n                }\n            })\n      }\n    return(\n        <div className=\"row\">\n            <h2>{props.title}</h2>\n            <div className=\"posters\">\n\n                { movie.map((data,index)=>\n                    <img onClick={()=>{handleMovie(data.id)}} key={index} className={props.isSmall ? 'smallPoster' : 'poster'} src={`${imageUrl+data.backdrop_path}`} alt=\"\" />\n                )}\n                \n                \n\n            </div>\n           { urlId && <YouTube videoId={urlId.key} opts={opts} />}\n        </div>\n\n    )\n}\n\nexport default RowPost"]},"metadata":{},"sourceType":"module"}